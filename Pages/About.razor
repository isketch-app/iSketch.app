@page "/About";
@implements IDisposable;
@inject Database db;  
@using System.Reflection;
@using System.Timers;

<div class="page">
    <div class="logo"></div>
    <h2>iSketch.app</h2>
    <p>@description</p>
    <hr />
    <table>
        <tr>
            <td>Version:</td>
            <td>@name</td>
        </tr>
        <tr>
            <td>Author:</td>
            <td>@author</td>
        </tr>
        <tr>
            <td>Copyright:</td>
            <td>@copyright</td>
        </tr>
        <tr>
            <td>Repository:</td>
            <td><a target="_blank" href="https://github.com/isketch-app/iSketch.app">GitHub</a></td>
        </tr>
    </table>
    <hr />
    <table>
        <tr>
            <td>Server Time:</td>
            <td>@DateTime.Now.ToString()</td>
        </tr>
        <tr>
            <td>Internal Name:</td>
            <td>@servername</td>
        </tr>
        <tr>
            <td>OS:</td>
            <td>@os</td>
        </tr>
        <tr>
            <td>CPU Threads:</td>
            <td>@threads</td>
        </tr>
    </table>
    <hr />
    <table>
        <tr>
            <td>Powered by .NET:</td>
            <td>@netversion</td>
        </tr>
    </table>
</div>

@code {
    private static Assembly self = Assembly.GetExecutingAssembly();
    private string name = self.GetName().Version.ToString();
    private string description = self.GetCustomAttribute<AssemblyDescriptionAttribute>().Description;
    private string author = self.GetCustomAttribute<AssemblyCompanyAttribute>().Company;
    private string copyright = self.GetCustomAttribute<AssemblyCopyrightAttribute>().Copyright;
    private string servername = System.Environment.MachineName;
    private string os = System.Environment.OSVersion.ToString();
    private string threads = System.Environment.ProcessorCount.ToString();
    private string netversion = System.Environment.Version.ToString();
    private Timer timer = new Timer();
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timer.Interval = 1000;
            timer.AutoReset = true;
            timer.Elapsed += RefreshTime;
            timer.Start();
        }
        return base.OnAfterRenderAsync(firstRender);
    }
    private void RefreshTime(object o, ElapsedEventArgs e)
    {
        InvokeAsync(() => {
            StateHasChanged();
        });
    }
    public void Dispose()
    {
        timer.Elapsed -= RefreshTime;
        timer.Stop();
        timer.Dispose();
    }
}
@page "/Account"
@using System.Data.SqlClient
@inject Services.User USR;
@inject Services.Database DB
@inject NavigationManager NM;
@inject PassHashQueue PHQ;

<Authenticated>
    <div class="main">
        <div class="page">
            <div class="title">
                <div class="photo">
                    @if (ProfilePictureID != null)
                    {
                        <div style="background-image:url('/_Photo/profile-picture/@ProfilePictureID')"></div>
                    }
                </div>
                <BPageTitle Icon="" Title='@("Welcome, " + USR.UserName)' />
                <span class="subtext">Manage and customize your iSketch.app profile.</span>
            </div>
            <div class="details">
                <CText Icon="" Label="3rd Party Account Provider" Enabled="false" Value="@IdpName" />
                <CText Icon="" Label="Account Creation Time" Enabled="false" Value="@CreatedTime.ToString()" />
                <CText Icon="" Label="Last Logon Time" Enabled="false" Value="@LastLogonTime.ToString()" />
                <CText Icon="" Label="Email" Enabled="false" Value="@Email" />
                <CText Icon="" Label="Status" Enabled="false" Value="@Biography" />
            </div>
        </div>
        <div class="sidebar">
            <CButton Emphasis="Emphasis.Low" Icon="" OnClick='() => Dialog = "SetStatus"'>Set Status</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="" OnClick='() => Dialog = "ChangePassword"'>Change Password</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="">Link 3rd Party Account</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="">Request New Username</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="" OnClick='() => Dialog = "ChangePhoto"'>Change Photo</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="">Change / Verify Email</CButton>
            <hr />
            <CButton Emphasis="Emphasis.Low" Icon="">View Public Profile</CButton>
            <hr />
            <CButton Emphasis="Emphasis.Low" Icon="">Delete Account</CButton>
        </div>
    </div>
    @if (Dialog == "SetStatus")
    {
        <Dialog OnFadeOut='() => { CloseDialog(); OnInitialized(); }' @ref="DlgStatusMsg" Header="🤔 Set status message">
            <Warning Message="@Warning" />
            <p>What's on your mind, @(USR.UserName)?</p>
            <CText Value="@Biography" ValueChanged='(v) => Biography = v' Icon="" />
            <DialogButtonContainer>
                 <SavAppCan 
                    OnCancelClick='() => DlgStatusMsg.FadeOut()'
                    OnApplyClick='() => SetBiography()'
                    OnSaveClick='() => SetBiography(true)'
                 />
            </DialogButtonContainer>
        </Dialog>
    }
    @if (Dialog == "ChangePassword")
    {
        <Dialog OnFadeOut='() => { CloseDialog(); OnInitialized(); }' @ref="DlgChangePassword" Header="Set a new password">
            <Warning Message="@Warning" />
            <p><CText Value="@OldPassword" ValueChanged='(v) => OldPassword = v' Type="password" Icon="" Label="Password (old)" /></p>
            <p><CText Value="@NewPassword" ValueChanged='(v) => NewPassword = v' Type="password" Icon="" Label="Password (new)" /></p>
            <p><CText Value="@ConfirmPassword" ValueChanged='(v) => ConfirmPassword = v' Type="password" Icon="" Label="Password (confirm)" /></p>
            <DialogButtonContainer>
                <SavAppCan 
                    OnCancelClick='() => DlgChangePassword.FadeOut()'
                    OnApplyClick='() => SetPassword()'
                    OnSaveClick='() => SetPassword(true)'
                />
            </DialogButtonContainer>
        </Dialog>
    }
    @if (Dialog == "ChangePhoto")
    {
        <Dialog OnFadeOut='() => { CloseDialog(); OnInitialized(); }' @ref="DlgChangePhoto" Header="Set your account photo">
            <Warning Message="@Warning" />
            <p>
                @foreach(KeyValuePair<string, string> photo in GetAccountPhotos())
                {
                    <img src="/_Photo/profile-picture/@photo.Key" />
                }
            </p>
            <DialogButtonContainer>
                <SavAppCan 
                    OnCancelClick='() => DlgChangePhoto.FadeOut()'
                    OnApplyClick='() => {}'
                    OnSaveClick='() => {}'
                />
            </DialogButtonContainer>
        </Dialog>
    }
</Authenticated>

@code {
    public DateTime CreatedTime;
    public string Email;
    public string Biography;
    public DateTime LastLogonTime;
    public string IdpName;
    public string ProfilePictureID;
    public string Dialog;
    public Dialog DlgStatusMsg;
    public Dialog DlgChangePassword;
    public Dialog DlgChangePhoto;
    public string sWarning;
    public string Warning { 
        get
        {
            return sWarning;
        } 
        set
        {
            sWarning = value;
            StateHasChanged();
        } 
    }
    public string OldPassword;
    public string NewPassword;
    public string ConfirmPassword;
    protected override void OnInitialized()
    {
        if (USR.Session.UserID == Guid.Empty) return;
        SqlCommand cmd = DB.NewConnection.CreateCommand();
        try
        {
            cmd.Parameters.AddWithValue("@USERID@", USR.Session.UserID);
            cmd.CommandText = "SELECT CreatedTime, Email, Biography, LastLogonTime, IdpName, ProfilePictureID FROM [Security.Users.Splice] WHERE UserID = @USERID@";
            SqlDataReader reader = cmd.ExecuteReader();
            reader.Read();
            CreatedTime = reader.GetDateTime(0);
            if (!reader.IsDBNull(1)) Email = reader.GetString(1);
            if (!reader.IsDBNull(2))
            {
                Biography = reader.GetString(2);
            }
            else
            {
                Biography = "";
            }
            if (!reader.IsDBNull(3)) LastLogonTime = reader.GetDateTime(3);
            if (!reader.IsDBNull(4)) IdpName = reader.GetString(4);
            if (!reader.IsDBNull(5)) ProfilePictureID = reader.GetGuid(5).ToString();
        }
        finally
        {
            cmd.Connection.Close();
        }
        base.OnInitialized();
    }
    private void CloseDialog()
    {
        Dialog = null;
        Warning = null;
    }
    private Dictionary<string, string> GetAccountPhotos()
    {
        Dictionary<string, string> photos = new();
        SqlCommand cmd = DB.NewConnection.CreateCommand();
        try
        {
            cmd.CommandText = "SELECT ProfilePictureID, DisplayName FROM [System.ProfilePictures] ORDER BY DisplayOrder ASC";
            SqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                photos.Add(reader.GetGuid(0).ToString(), reader.GetString(1));
            }
        }
        finally
        {
            cmd.Connection.Close();
        }
        return photos;
    }
    private void SetBiography(bool tryClose = false)
    {
        SqlCommand cmd = DB.NewConnection.CreateCommand();
        try
        {
            cmd.Parameters.AddWithValue("@USERID@", USR.Session.UserID);
            cmd.Parameters.AddWithValue("@BIO@", Biography);
            cmd.CommandText = "UPDATE [Security.Users] SET [Biography] = @BIO@ WHERE UserID = @USERID@";
            cmd.ExecuteNonQuery();
            if (tryClose) _ = DlgStatusMsg.FadeOut();
        }
        catch
        {
            Warning = "Failed to set status.";
        }
        finally
        {
            cmd.Connection.Close();
        }
    }
    private async Task SetPassword(bool tryClose = false)
    {
        try
        {
            if (NewPassword != ConfirmPassword)
            {
                Warning = "New passwords do not match.";
                return;
            }
            Warning = "Validating old password...";
            if (!await Task.Run<bool>(() => UserTools.TestPassword(DB, PHQ, USR.Session.UserID, OldPassword)))
            {
                Warning = "Incorrect password.";
                return;
            }
            Warning = "Setting password...";
            if (!await Task.Run<bool>(() => UserTools.ChangePassword(DB, PHQ, USR.Session.UserID, NewPassword)))
            {
                Warning = "Failed to set password!";
                return;
            }
            Warning = "Success!";
            if (tryClose) CloseDialog();
        }
        finally
        {
            OldPassword = NewPassword = ConfirmPassword = null;
        }
    }
}
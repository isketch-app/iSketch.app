@page "/Account";
@inject User User;
@inject EventHookScoped EventHookScoped;
@inject NavigationManager NavigationManager;

<Authenticated>
    <div class="main">
        <div class="page">
            <div class="title">
                <ProfilePicture ProfilePictureID="User.ProfilePictureID" />
                <BPageTitle Icon="" Title='@("Welcome, " + User.UserName)' />
                <span class="subtext">Manage and customize your iSketch.app profile.</span>
            </div>
            <div class="details">
                <CText Icon="" Label="3rd Party Account Provider" Enabled="false" Value="@IdpName" />
                <CText Icon="" Label="Account Creation Time" Enabled="false" Value="@CreatedTime" />
                <CText Icon="" Label="Last Logon Time" Enabled="false" Value="@LastLogonTime" />
                <CText Icon="" Label="Email" Enabled="false" Value="@Email" />
                <CText Icon="" Label="Status" Enabled="false" Value="@Biography" />
            </div>
        </div>
        <div class="sidebar">
            <CButton Emphasis="Emphasis.Low" Icon="" OnClick='() => Dialog = "SetStatus"'>Set Status</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="" OnClick='() => Dialog = "ChangePassword"'>Change Password</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="">Link 3rd Party Account</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="">Request New Username</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="" OnClick='() => Dialog = "ChangePhoto"'>Change Avatar</CButton>
            <CButton Emphasis="Emphasis.Low" Icon="">Change / Verify Email</CButton>
            <hr />
            <CButton Emphasis="Emphasis.Low" Icon="">View Public Profile</CButton>
            <hr />
            <CButton Emphasis="Emphasis.Low" Icon="">Delete Account</CButton>
        </div>
    </div>
    @if (Dialog == "SetStatus")
    {
        <SetStatusDialog @bind-Biography="Biography" OnFadeOut='() => { Dialog = ""; }' />
    }
    @if (Dialog == "ChangePassword")
    {
        <ChangePasswordDialog OnFadeOut='() => { Dialog = ""; }' />
    }
    @if (Dialog == "ChangePhoto")
    {
        <ChangeProfilePicture OnFadeOut='() => { Dialog = ""; }' />
    }
</Authenticated>

@code {
    private string Dialog;
    private string Biography;
    private string IdpName;
    private string CreatedTime;
    private string LastLogonTime;
    private string Email;
    protected override void OnInitialized()
    {
        EventHookScoped.LoginLogoutStatusChanged += OnLoginLogoutStatusChanged;
        EventHookScoped.ProfilePictureIDChanged += OnProfilePictureIDChanged;
        LoadUserData();
        base.OnInitialized();
    }

    private void LoadUserData()
    {
        if (User.Session.UserID == Guid.Empty) return;
        Email = (string)User.GetProperty(UserProperties.Email);
        IdpName = (string)User.GetProperty(UserProperties.IdpName);
        Biography = (string)User.GetProperty(UserProperties.Biography);
        CreatedTime = User.GetProperty(UserProperties.CreatedTime).ToString();
        LastLogonTime = User.GetProperty(UserProperties.LastLogonTime).ToString();
    }

    private void OnLoginLogoutStatusChanged(object o, EventArgs a)
    {
        LoadUserData();
    }

    private void OnProfilePictureIDChanged(object o, EventArgs a)
    {
        StateHasChanged();
    }
}
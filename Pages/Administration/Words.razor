@page "/Administration/Words";
@page "/Administration/Words/{PageNumber:int}";
@page "/Administration/Words/{WordID}";
@page "/Administration/Words/{PageNumber:int}/{WordID}";
@inject Services.Database db;
@inject NavigationManager nm;
@using System.Data.SqlClient;
@using iSketch.app.Shared.Admin.TableEditor;
@using iSketch.app.Shared.Body;
@using iSketch.app.Shared.Controls;

@if (WordID != null)
{
    <div class="popup">
        <div></div>
        <div class="form">
            @if (!InitEditWord())
            {
                <PageTitle Title="Word does not exist!" />
            }
            <PageTitle Icon="" Title='@("Editing word: " + @WordValue)' />
            <!--<CButton Icon="">Delete</CButton>-->
            <hr />
            <CNumber Icon="" Label="Score" Value="@ScoreValue" @ref="ScoreValueInput" />
            <CText Icon="" Enabled="false" Label="Difficulty" Value="@DifficultyValue" />
            <hr />
            <SavAppCan OnApplyClick="() => {
                            SetWordParameters();
                        }"
                       OnSaveClick='() => {
                            SetWordParameters();
                            nm.NavigateTo("/Administration/Words/" + PageNumber);
                        }'
                       OnCancelClick='() => {
                            nm.NavigateTo("/Administration/Words/" + PageNumber);
                        }' />
        </div>
        <div></div>
    </div>
}

<PageTitle Title="Word List" />
<TableEditor PageNumber="PageNumber"
             SQLCon="db.DBCon"
             PagePath="/Administration/Words"
             PathIncludePageNumber="true"
             TableName="[Words.Difficulty]"
             VisibleRows='new List<string>() { "WordID", "Word", "Difficulty", "Score" }'
             VisibleRowsTitles='new List<string>() { "WordID", "Word", "Difficulty", "Score" }' />

@code {
    [Parameter]
    public int PageNumber { get; set; }
    [Parameter]
    public string WordID { get; set; }
    private string WordValue = "";
    private string ScoreValue = "";
    private CNumber ScoreValueInput;
    private string DifficultyValue = "";
    private bool InitEditWord()
    {
        if (!Guid.TryParse(WordID, out Guid id)) return false;
        SqlCommand cmd = new SqlCommand("SELECT TOP(1) Word, Score, Difficulty FROM [Words.Difficulty] WHERE WordID = '" + id.ToString() + "'", db.DBCon);
        SqlDataReader rdr = cmd.ExecuteReader();
        try
        {
            rdr.Read();
            DifficultyValue = ScoreValue = WordValue = "";
            WordValue = rdr.GetString(0);
            ScoreValue = rdr.GetInt32(1).ToString();
            if (rdr.IsDBNull(2))
            {
                DifficultyValue = "";
            }
            else
            {
                DifficultyValue = rdr.GetString(2);
            }
            rdr.Close();
            return true;
        }
        catch (Exception)
        {
            rdr.Close();
            return false;
        }
    }
    private bool SetWordParameters()
    {
        try
        {
            if (!Guid.TryParse(WordID, out Guid id)) return false;
            SqlCommand cmd = new SqlCommand("UPDATE Words SET Score = " + ScoreValueInput.Value + " WHERE WordID = '" + id.ToString() + "'", db.DBCon);
            cmd.ExecuteNonQuery();
            return true;
        }
        catch (Exception)
        {
            return false;
        }
    }
}
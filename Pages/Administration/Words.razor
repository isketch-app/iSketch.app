@page "/Administration/Words";
@page "/Administration/Words/{PageNumber:int}";
@page "/Administration/Words/{WordID}";
@page "/Administration/Words/{PageNumber:int}/{WordID}";
@inject Services.Database db;
@inject NavigationManager nm;
@inject IJSRuntime js;
@inject Services.EventHook eh;
@using System.Data.SqlClient;
@using System.Text.RegularExpressions;

@if (WordID != null)
{
    string Title = "";
    InitStat = InitEditWord();
    if (InitStat == 0) Title = "Modify word.";
    if (InitStat == 1) Title = "Add a new word.";
    if (InitStat == 2) Title = "An error occured.";
    <Dialog OnFadeOut="NavBackToList" Header="@Title" @ref="Dialog">
        @if (InitStat == 0)
        {
            <div style="text-align:right;">
                <CAreYouSure ButtonText="Delete" ButtonIcon="" OnYesClick="DeleteWord" />
            </div>
            <br />
        }
        @if (InitStat == 2)
        {
            <div>This word does not exist.</div>
            <DialogButtonContainer>
                <CButton Emphasis="Emphasis.Low" OnClick="Dialog.FadeOut">Dismiss</CButton>
            </DialogButtonContainer>
        }
        @if (InitStat == 0 || InitStat == 1)
        {
            <CText Icon="" Label="Word" Value="@InitWordValue" @ref="WordValue" />
            <br />
            <CText Icon="" Label="Score" Value="@InitScoreValue" @ref="ScoreValue" />
        }
        @if (InitStat == 0)
        {
            <br />
            <CText Icon="" Enabled="false" Label="Difficulty" Value="@InitDifficultyValue" />
            <DialogButtonContainer>
                <SavAppCan OnApplyClick="SetWordParameters" OnCancelClick="Dialog.FadeOut" OnSaveClick="
                    async () => {
                        SetWordParameters();
                        await Dialog.FadeOut();
                    }
                " />
            </DialogButtonContainer>
        }
        @if (InitStat == 1)
        {
            <DialogButtonContainer>
                <CButton Emphasis="Emphasis.Low" OnClick="AddWord" Icon="">Add</CButton>
                <CButton Emphasis="Emphasis.Low" Icon="" OnClick="Dialog.FadeOut">Done</CButton>
            </DialogButtonContainer>
        }
    </Dialog>
}

@if (Error != "")
{
    <Dialog OnFadeOut='@(() => Error = "")' OnDismiss='@((t) => t.FadeOut())' Header="An error occured.">@Error</Dialog>
}

<PageTitle Title="Word List" />
<a href="/Administration/Words/@PageNumber/Add">
    <CButton Emphasis="Emphasis.Medium" Icon="">New Word</CButton>
</a>
<br /><br />
<div class="table-container">
    <TableEditor PageNumber="PageNumber"
                 SQLCon="db.Connection"
                 PagePath="/Administration/Words"
                 PathIncludePageNumber="true"
                 TableName="[Words.Difficulty]"
                 VisibleRows='new List<string>() { "WordID", "Word", "Difficulty", "Score" }'
                 VisibleRowsTitles='new List<string>() { "WordID", "Word", "Difficulty", "Score" }' />
</div>

@code {
    [Parameter]
    public int PageNumber { get; set; }
    [Parameter]
    public string WordID { get; set; }
    private CText WordValue;
    private CText ScoreValue;
    private Dialog Dialog;
    private string InitWordValue = "";
    private string InitScoreValue = "";
    private string InitDifficultyValue = "";
    private int InitStat = 0;
    private string Error = "";
    private int InitEditWord()
    {
        InitDifficultyValue = InitWordValue = InitScoreValue = "";
        if (!Guid.TryParse(WordID, out Guid id)) return 1;
        SqlCommand cmd = db.Connection.CreateCommand();
        cmd.CommandText = "SELECT TOP(1) Word, Score, Difficulty FROM [Words.Difficulty] WHERE WordID = '" + id.ToString() + "'";
        SqlDataReader rdr = cmd.ExecuteReader();
        if (!rdr.HasRows)
        {
            rdr.Close();
            return 2;
        }
        try
        {
            rdr.Read();
            InitWordValue = rdr.GetString(0);
            InitScoreValue = rdr.GetInt32(1).ToString();
            if (rdr.IsDBNull(2))
            {
                InitDifficultyValue = "";
            }
            else
            {
                InitDifficultyValue = rdr.GetString(2);
            }
            rdr.Close();
            return 0;
        }
        catch (Exception)
        {
            rdr.Close();
            return 0;
        }
    }
    private void SetWordParameters()
    {
        try
        {
            if (!Guid.TryParse(WordID, out Guid id)) return;
            string word = FilterWord(WordValue.Value);
            if (word == "") return;
            SqlCommand cmd = db.Connection.CreateCommand();
            cmd.CommandText = "UPDATE Words SET Word = @WORD, Score = " + ScoreValue.Value + " WHERE WordID = '" + id.ToString() + "'";
            cmd.Parameters.AddWithValue("@WORD", word);
            cmd.ExecuteNonQuery();
            eh.OnAdminWordsChanged();
            return;
        }
        catch (SqlException e)
        {
            Error = "Unknown error setting this word.";
            if (e.Number == 2627) Error = "This word already exists.";
            return;
        }
        catch (Exception)
        {
            Error = "Unknown error setting this word.";
            return;
        }
    }
    private async void DeleteWord()
    {
        if (!Guid.TryParse(WordID, out Guid id)) return;
        SqlCommand cmd = db.Connection.CreateCommand();
        cmd.CommandText = "DELETE FROM Words WHERE WordID = '" + id.ToString() + "'";
        cmd.ExecuteNonQuery();
        eh.OnAdminWordsChanged();
        await Dialog.FadeOut();
    }
    private void AddWord()
    {
        string word = FilterWord(WordValue.Value);
        if (word == "") return;
        try
        {
            SqlCommand cmd = db.Connection.CreateCommand();
            cmd.CommandText = "INSERT INTO Words (Word, Score) VALUES(@WORD, @SCORE)";
            cmd.Parameters.AddWithValue("@WORD", word);
            cmd.Parameters.AddWithValue("@SCORE", ScoreValue.Value);
            cmd.ExecuteNonQuery();
            WordValue.SetValue("");
            ScoreValue.SetValue("");
            eh.OnAdminWordsChanged();
        }
        catch (SqlException e)
        {
            Error = "Unknown error adding this word.";
            if (e.Number == 2627) Error = "This word already exists.";
            return;
        }
        catch (Exception)
        {
            Error = "Unknown error adding this word.";
            return;
        }
    }
    private string FilterWord(string Word)
    {
        return Regex.Replace(Word.ToLower(), "[^a-z]", "");
    }
    private void NavBackToList()
    {
        nm.NavigateTo("/Administration/Words/" + PageNumber);
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            eh.AdminWordsChanged += On_AdminWordsChanged;
        }
        return base.OnAfterRenderAsync(firstRender);
    }
    private void On_AdminWordsChanged(object s, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }
}
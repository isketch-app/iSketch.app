@using System.Data.SqlClient;
@inject NavigationManager nm;
@inject IJSRuntime js;

@{
    if (!inited) TableInit();
}

<div class="table-body" id="@GUID">
    <table>
        <tr>
            <td class="icon"></td>
            @if (PhotoEndpoint != null)
            {
                <td></td>
            }
            @{
                int i = 0;
            }
            @foreach (string title in VisibleRowsTitles)
            {
                int index = i;
                if (i++ == 0) continue;
                <th @onclick="() => OnSortClick(index)">
                    @{
                        string sorticn = "";
                        if (SortColumnAndDirection == index) sorticn = "";
                        if (SortColumnAndDirection * -1 == index) sorticn = "";
                    }
                    <span>@title</span>
                    <span class="sort-btn">@sorticn</span>
                </th>
            }
            <th></th>
        </tr>
        <tr>
            <td class="icon"></td>
            @if (PhotoEndpoint != null)
            {
                <td></td>
            }
            @{
                i = 0;
            }
            @foreach (string title in VisibleRowsTitles)
            {
                int index = i;
                if (i++ == 0) continue;
                <td class="filter">
                    <input @onchange="@((e) => {
                        RowFilters[index] = e.Value.ToString();
                        OnFilterChange();
                    })" type="text" />
                </td>
            }
            <td></td>
        </tr>
        @foreach (List<string> row in TableData)
        {
            <tr @onclick="() => nm.NavigateTo(PrintMorePath(row[0]))">
                <td class="icon"></td>
                @if (PhotoEndpoint != null)
                {
                    <td><div class="photo" style="background-image:url('/_Photo/@PhotoEndpoint/@row[0]');"></div></td>
                }
                @{
                    i = 0;
                }
                @foreach (string field in row)
                {
                    if (i++ == 0) continue;
                    <td>@field</td>
                }
                <td></td>
            </tr>
        }
    </table>
    <div class="pagination">
        @{
            string star, prev, next, last;
            string page = PagePath + "/";
            uint maxOnPage = ResultOffset + MaxResults;
            uint minOnPage = ResultOffset + 1;
            int lastPage = (qTotal / (int)MaxResults);
            star = page + 0;
            prev = page + (PageNumber - 1);
            next = page + (PageNumber + 1);
            last = page + lastPage;
            if (PageNumber <= 0) star = prev = "";
            if (PageNumber >= lastPage) next = last = "";
            if (maxOnPage > qTotal) maxOnPage = (uint)qTotal;
            if (qTotal == 0) minOnPage = 0;
        }
        <span class="details">@minOnPage-@maxOnPage of @qTotal</span>
        <span class="buttons">
            <a href="@star"></a>
            <a href="@prev"></a>
            <a href="@next"></a>
            <a href="@last"></a>
        </span>
    </div>
</div>

@code {
    [Parameter]
    public Database DB { get; set; }
    [Parameter]
    public string TableName { get; set; } = "";
    [Parameter]
    public string PagePath { get; set; } = "";
    [Parameter]
    public string PhotoEndpoint { get; set; }
    [Parameter]
    public List<string> VisibleRows { get; set; } = new List<string>();
    [Parameter]
    public List<string> VisibleRowsTitles { get; set; } = new List<string>();
    [Parameter]
    public uint ResultOffset { get; set; } = 0;
    [Parameter]
    public uint MaxResults { get; set; } = 25;
    [Parameter]
    public bool PathIncludePageNumber { get; set; } = false;
    [Parameter]
    public int PageNumber
    {
        get
        {
            return pPageNumber;
        }
        set
        {
            pPageNumber = value;
            ResultOffset = (uint)(MaxResults * pPageNumber);
            if (inited) OnPageChange();
            js.InvokeVoidAsync("eval", "document.getElementById('" + GUID + "').scroll(0, 0);");
        }
    }
    private string GUID = "x" + Guid.NewGuid();
    private int qTotal = 0;
    private bool inited = false;
    private int pPageNumber = 0;
    private int SortColumnAndDirection = 1;
    private string[] RowFilters;
    private List<List<string>> TableData = new List<List<string>>();
    public void TableInit()
    {
        RowFilters = new string[VisibleRows.Count];
        ReQueryTable();
        inited = true;
    }
    private void ReQueryTable()
    {
        SqlConnection SQLCon = DB.NewConnection;
        try
        {
            string SVRows = "";
            TableData = new List<List<string>>();
            foreach (string vRow in VisibleRows)
            {
                SVRows += vRow + ",";
            }
            SVRows = SVRows.Substring(0, SVRows.Length - 1);
            qTotal = (int)(new SqlCommand("SELECT COUNT(*) AS Count FROM " + TableName, SQLCon).ExecuteScalar());
            SqlCommand cmd = new SqlCommand("SELECT " + SVRows + " FROM " + TableName, SQLCon);
            int filterIndex = 0;
            int validFilters = 0;
            foreach (string filter in RowFilters)
            {
                int i = filterIndex;
                if (filterIndex++ == 0) continue;
                if (RowFilters[i] != null && RowFilters[i] != "")
                {
                    cmd.Parameters.AddWithValue("@FilterString" + i, '%' + filter + '%');
                    if (validFilters++ == 0)
                    {
                        cmd.CommandText += " WHERE ";
                    }
                    else
                    {
                        cmd.CommandText += " AND ";
                    }
                    cmd.CommandText += VisibleRows[i] + " LIKE @FilterString" + i;
                }
            }
            if (SortColumnAndDirection >= 1)
            {
                cmd.CommandText += " ORDER BY " + VisibleRows[SortColumnAndDirection] + " ASC";
            }
            else
            {
                cmd.CommandText += " ORDER BY " + VisibleRows[SortColumnAndDirection * -1] + " DESC";
            }
            cmd.CommandText += " OFFSET " + ResultOffset + " ROWS FETCH NEXT " + MaxResults + " ROWS ONLY";
            SqlDataReader rdr = cmd.ExecuteReader();
            while (rdr.Read())
            {
                List<string> fields = new List<string>();
                for (int i = 0; rdr.FieldCount > i; i++)
                {
                    fields.Add(rdr.GetValue(i).ToString());
                }
                TableData.Add(fields);
            }
            StateHasChanged();
        }
        finally
        {
            SQLCon.Close();
        }
    }
    private void OnFilterChange()
    {
        if (PageNumber == 0)
        {
            ReQueryTable();
        }
        else
        {
            nm.NavigateTo(PagePath);
        }
    }
    private void OnPageChange()
    {
        ReQueryTable();
    }
    private void OnSortClick(int sortColumnAndDirection)
    {
        if (SortColumnAndDirection == sortColumnAndDirection) sortColumnAndDirection = sortColumnAndDirection * -1;
        SortColumnAndDirection = sortColumnAndDirection;
        ReQueryTable();
    }
    private string PrintMorePath(string ID)
    {
        @if (PathIncludePageNumber)
        {
            return PagePath + "/" + PageNumber + "/" + ID;
        }
        else
        {
            return PagePath + "/" + ID;
        }
    }
}
@using System.Data.SqlClient;
@inject NavigationManager nm;

@{ if (!inited) TableInit(); }

<div class="table-body">
    <table>
        <tr>
            @{int i = 0;}
            @foreach (string title in VisibleRowsTitles)
            {
                int index = i;
                if (i++ == 0) continue;
                <th>@title</th>
            }
            <!--<th class="table-nav">
                <span>Records: @qTotal</span>
                <span>|</span>
                <span>Page: </span>
                <a href="@PagePath/@(PageNumber - 1)"></a>
                <span>@PageNumber</span>
                <a href="@PagePath/@(PageNumber + 1)"></a>
            </th>-->
        </tr>
        <tr>
            @{i = 0;}
            @foreach (string title in VisibleRowsTitles)
            {
                int index = i;
                if (i++ == 0) continue;
                <th>
                    <div class="filter">
                        <input @onchange="@((e) => {
                            RowFilters[index] = e.Value.ToString();
                            OnFilterChange();
                        })" type="text" />
                        <span class="icon"></span>
                        <span class="sort-btns">
                            @{
                                string sortup = "";
                                string sortdn = "";
                                if (SortColumnAndDirection == index) sortup = "selected";
                                if (SortColumnAndDirection * -1 == index) sortdn = "selected";
                            }
                            <span class="sort-up @sortup" @onclick="@(() => {
                                OnSortClick(index);
                            })"></span>
                            <span class="sort-dn @sortdn" @onclick="@(() => {
                                OnSortClick(index * -1);
                            })"></span>
                        </span>
                    </div>
                </th>
            }
        </tr>
        @foreach (List<string> row in TableData)
        {
            <tr onclick="Blazor.navigateTo('@PrintMorePath(row[0])')">
                @{i = 0;}
                @foreach (string field in row)
                {
                    if (i++ == 0) continue;
                    <td>@field</td>
                }
            </tr>
        }
    </table>
</div>

@code {
    [Parameter]
    public SqlConnection SQLCon { get; set; }
    [Parameter]
    public string TableName { get; set; } = "";
    [Parameter]
    public string PagePath { get; set; } = "";
    [Parameter]
    public List<string> VisibleRows { get; set; } = new List<string>();
    [Parameter]
    public List<string> VisibleRowsTitles { get; set; } = new List<string>();
    [Parameter]
    public uint ResultOffset { get; set; } = 0;
    [Parameter]
    public uint MaxResults { get; set; } = 100;
    [Parameter]
    public bool PathIncludePageNumber { get; set; } = false;
    [Parameter]
    public int PageNumber
    {
        get
        {
            return pPageNumber;
        }
        set
        {
            pPageNumber = value;
            ResultOffset = (uint)(MaxResults * pPageNumber);
            if (inited) OnPageChange();
        }
    }
    private int qTotal = 0;
    private bool inited = false;
    private int pPageNumber = 0;
    private int SortColumnAndDirection = 1;
    private string[] RowFilters;
    private List<List<string>> TableData = new List<List<string>>();
    public void TableInit()
    {
        RowFilters = new string[VisibleRows.Count];
        ReQueryTable();
        inited = true;
    }
    private void ReQueryTable()
    {
        string SVRows = "";
        TableData = new List<List<string>>();
        foreach (string vRow in VisibleRows)
        {
            SVRows += vRow + ",";
        }
        SVRows = SVRows.Substring(0, SVRows.Length - 1);
        qTotal = (int)(new SqlCommand("SELECT COUNT(*) AS Count FROM Words " + TableName, SQLCon).ExecuteScalar());
        SqlCommand cmd = new SqlCommand("SELECT " + SVRows + " FROM " + TableName, SQLCon);
        int filterIndex = 0;
        int validFilters = 0;
        foreach (string filter in RowFilters)
        {
            int i = filterIndex;
            if (filterIndex++ == 0) continue;
            if (RowFilters[i] != null && RowFilters[i] != "")
            {
                cmd.Parameters.AddWithValue("@FilterString" + i, '%' + filter + '%');
                if (validFilters++ == 0)
                {
                    cmd.CommandText += " WHERE ";
                }
                else
                {
                    cmd.CommandText += " AND ";
                }
                cmd.CommandText += VisibleRows[i] + " LIKE @FilterString" + i;
            }
        }
        if (SortColumnAndDirection >= 1)
        {
            cmd.CommandText += " ORDER BY " + VisibleRows[SortColumnAndDirection] + " ASC";
        }
        else
        {
            cmd.CommandText += " ORDER BY " + VisibleRows[SortColumnAndDirection * -1] + " DESC";
        }
        cmd.CommandText += " OFFSET " + ResultOffset + " ROWS FETCH NEXT " + MaxResults + " ROWS ONLY";
        SqlDataReader rdr = cmd.ExecuteReader();
        while (rdr.Read())
        {
            List<string> fields = new List<string>();
            for (int i = 0; rdr.FieldCount > i; i++)
            {
                fields.Add(rdr.GetValue(i).ToString());
            }
            TableData.Add(fields);
        }
        rdr.Close();
        StateHasChanged();
    }
    private void OnFilterChange()
    {
        if (PageNumber == 0)
        {
            ReQueryTable();
        }
        else
        {
            nm.NavigateTo(PagePath);
        }
    }
    private void OnPageChange()
    {
        ReQueryTable();
    }
    private void OnSortClick(int sortColumnAndDirection)
    {
        SortColumnAndDirection = sortColumnAndDirection;
        ReQueryTable();
    }
    private string PrintMorePath(string ID)
    {
        @if (PathIncludePageNumber)
        {
            return PagePath + "/" + PageNumber + "/" + ID;
        }
        else
        {
            return PagePath + "/" + ID;
        }
    }
}
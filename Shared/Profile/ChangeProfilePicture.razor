@using System.Data.SqlClient;
@inject User User;
@inject Database Database;
@inject EventHookScoped EventHookScoped;

<Authenticated>
    <Dialog Icon="" OnFadeOut="() => DialogClosing()" @ref="Dialog" Header="Set your account avatar">
        <Warning Message="@Warning" />
        <div class="photo-selection">
            @{
                string spanClass = "";
                if (SelectedPictureID == null) spanClass = "selected";
            }
            <div class="selection" @onclick="() => { SelectedPictureID = null; }">
                <div class="photo none @spanClass"></div>
                <div class="label">None</div>
            </div>
            @foreach (KeyValuePair<string, string> photo in ProfilePictures)
            {
                spanClass = "";
                if (SelectedPictureID == photo.Key) spanClass = "selected";
                <div class="selection" @onclick="() => { SelectedPictureID = photo.Key; }">
                    <div class="photo @spanClass" style="background-image:url('/_Photo/profile-picture/@photo.Key')"></div>
                    <div class="label">@photo.Value</div>
                </div>
            }
        </div>
        <DialogButtonContainer>
            <SavAppCan OnCancelClick='() => Dialog.FadeOut()'
                       OnApplyClick='() => SetProfilePicture()'
                       OnSaveClick='() => SetProfilePicture(true)' />
        </DialogButtonContainer>
    </Dialog>
</Authenticated>

@code {
    [Parameter]
    public EventCallback OnFadeOut { get; set; }
    private Dialog Dialog;
    private string Warning;
    private Dictionary<string, string> ProfilePictures;
    private string OriginalPictureID;
    private string rSelectedPictureID;
    private string SelectedPictureID
    {
        get
        {
            return rSelectedPictureID;
        }
        set
        {
            rSelectedPictureID = value;
            User.ProfilePictureID = value;
            EventHookScoped.OnProfilePictureIDChanged();
        }
    }

    protected override void OnInitialized()
    {
        SelectedPictureID = OriginalPictureID = User.ProfilePictureID;
        ProfilePictures = GetProfilePictures();
        base.OnInitialized();
    }
    private Dictionary<string, string> GetProfilePictures()
    {
        Dictionary<string, string> photos = new();
        SqlCommand cmd = Database.NewConnection.CreateCommand();
        try
        {
            cmd.CommandText = "SELECT ProfilePictureID, DisplayName FROM [System.ProfilePictures] ORDER BY DisplayOrder, DisplayName ASC";
            SqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                photos.Add(reader.GetGuid(0).ToString(), reader.GetString(1));
            }
        }
        finally
        {
            cmd.Connection.Close();
        }
        return photos;
    }
    private void SetProfilePicture(bool tryClose = false)
    {
        if (User.SetProperty(UserProperties.ProfilePictureID, SelectedPictureID))
        {
            OriginalPictureID = SelectedPictureID;
            if (tryClose) _ = Dialog.FadeOut();
        }
        else
        {
            Warning = "Failed to set profile picture.";
        }
    }
    private void DialogClosing()
    {
        SelectedPictureID = OriginalPictureID;
        OnFadeOut.InvokeAsync();
    }
}
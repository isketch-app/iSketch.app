@using System.Data.SqlClient;
@inject User User;
@inject Database Database;
@inject EventHookScoped EventHookScoped;

<Authenticated>
    <Dialog Icon="" OnFadeOut="OnFadeOut" @ref="Dialog" Header="Set your account avatar">
        <Warning Message="@Warning" />
        <div class="photo-selection">
            @{
                string spanClass = "";
                if (User.ProfilePictureID == null) spanClass = "selected";
            }
            <span class="@spanClass" @onclick="() => { User.ProfilePictureID = null; EventHookScoped.OnAccountPhotoChanged(); }" style="background-color:gray;"></span>
            @foreach (KeyValuePair<string, string> photo in AccountPhotos)
            {
                spanClass = "";
                if (User.ProfilePictureID == photo.Key) spanClass = "selected";
                <span class="@spanClass" @onclick="() => { User.ProfilePictureID = photo.Key; EventHookScoped.OnAccountPhotoChanged(); }" style="background-image:url('/_Photo/profile-picture/@photo.Key')"></span>
            }
        </div>
        <DialogButtonContainer>
            <SavAppCan OnCancelClick='() => Dialog.FadeOut()'
                       OnApplyClick='() => SetAccountPhoto()'
                       OnSaveClick='() => SetAccountPhoto(true)' />
        </DialogButtonContainer>
    </Dialog>
</Authenticated>

@code {
    [Parameter]
    public EventCallback OnFadeOut { get; set; }
    private Dialog Dialog;
    private string Warning;
    private string SavedProfilePictureID;
    private Dictionary<string, string> rAccountPhotos;
    private Dictionary<string, string> AccountPhotos
    {
        get
        {
            if (rAccountPhotos == null) rAccountPhotos = GetAccountPhotos();
            return rAccountPhotos;
        }
    }

    private Dictionary<string, string> GetAccountPhotos()
    {
        Dictionary<string, string> photos = new();
        SqlCommand cmd = Database.NewConnection.CreateCommand();
        try
        {
            cmd.CommandText = "SELECT ProfilePictureID, DisplayName FROM [System.ProfilePictures] ORDER BY DisplayOrder ASC";
            SqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                photos.Add(reader.GetGuid(0).ToString(), reader.GetString(1));
            }
        }
        finally
        {
            cmd.Connection.Close();
        }
        return photos;
    }
    private void SetAccountPhoto(bool tryClose = false)
    {
        SavedProfilePictureID = User.ProfilePictureID;
        SqlCommand cmd = Database.NewConnection.CreateCommand();
        try
        {
            object objProfilePicID = User.ProfilePictureID;
            if (User.ProfilePictureID == null)
            {
                objProfilePicID = DBNull.Value;
            }
            cmd.Parameters.AddWithValue("@USERID@", User.Session.UserID);
            cmd.Parameters.AddWithValue("@PICID@", objProfilePicID);
            cmd.CommandText = "UPDATE [Security.Users] SET ProfilePictureID = @PICID@ WHERE UserID = @USERID@";
            cmd.ExecuteNonQuery();
            if (tryClose) _ = Dialog.FadeOut();
        }
        catch
        {
            Warning = "Failed to set profile picture.";
        }
        finally
        {
            cmd.Connection.Close();
        }
    }
}
@inject IJSRuntime js;

<Control Icon="@Icon" Label="@Label">
    <input id="@GUID" value="@Value" @onchange="OnChange" type="number" />
</Control>

@code {
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public string Icon { get; set; }
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    [Parameter]
    public string Value
    {
        get
        {
            return rValue;
        }
        set
        {
            if (int.TryParse(value, out int num))
            {
                rValue = num.ToString();
            }
            else
            {
                rValue = "0";
            }
            js.InvokeVoidAsync("eval", "document.getElementById('" + GUID + "').value = '" + rValue + "';");
        }
    }
    public void SetValue(string Value)
    {
        this.Value = Value;
    }
    private string rValue = "0";
    private string GUID = "x" + Guid.NewGuid().ToString();
    private async Task OnChange(ChangeEventArgs e)
    {
        Value = e.Value.ToString();
        await ValueChanged.InvokeAsync(Value);
    }
} 
@inject IJSRuntime js;

<div class="input">
    <div class="lbl">@Label</div>
    <div class="container">
        @if (Enabled)
        {
            <input name="@Name" autofocus="@AutoFocus" focusonenter="@FocusOnEnter" clickonenter="@ClickOnEnter" id="@GUID" value="@Value" @onchange="OnChange" type="@Type" />
        }
        else
        {
            <input id="@GUID" value="@Value" @onchange="OnChange" type="@Type" disabled />
        }
        @if (IconSpecified)
        {
            <div class="icon">@Icon</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public string Icon { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string FocusOnEnter { get; set; }
    [Parameter]
    public bool AutoFocus { get; set; }
    [Parameter]
    public string ClickOnEnter { get; set; }
    [Parameter]
    public string Value
    {
        get
        {
            return rValue;
        }
        set
        {
            js.InvokeVoidAsync("eval", "document.getElementById('" + GUID + "').value = '" + value + "';");
            rValue = value;
        }
    }
    [Parameter]
    public bool Enabled { get; set; } = true;
    [Parameter]
    public string Type { get; set; } = "text";
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    public void SetValue(string Value)
    {
        this.Value = Value;
    }
    private string rValue = "";
    private string GUID = "x" + Guid.NewGuid().ToString();
    private async Task OnChange(ChangeEventArgs e)
    {
        Value = (string)e.Value;
        await ValueChanged.InvokeAsync((string)e.Value);
    }
    private bool IconSpecified {
        get
        {
            return (Icon != "");
        }
    }
} 
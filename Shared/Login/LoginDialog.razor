@using System.Net.Mail;
@inject Services.User user
@inject Services.Database db
@inject NavigationManager nm;
@inject Services.Session session;  
@inject Services.PassHashQueue phq; 
@inject EventHookScoped ehs;
@using OpenID; 

@if (user.Session.UserID == Guid.Empty)
{
    <Dialog AllowBreakOut="false" Icon="@(HeaderIcons[(int)CurrentStage])" Header="@(Headers[(int)CurrentStage])" @ref="Dialog">
        <Warning Message="@Warning" />
        @if (CurrentStage == Stage.SelectAnIDP)
        {
            <div class="px-300">
                <div class="logo"></div>
                <h3>Ready to sketch?</h3>
                <h4>Select an option to continue with:</h4>
                <div class="idp-buttons">
                    @foreach (idP idP in OpenID.GetIDPs(db))
                    {
                        <CButton IconURL='@("/_Photo/idP-icon/" + idP.IdpID.ToString())' Emphasis="CButton.EmphasisStyles.Medium" OnClick='() => { nm.NavigateTo(idP.GetRequestURI(session));   }'>@idP.DisplayName</CButton>
                    }
                    <CButton Icon="" Emphasis="CButton.EmphasisStyles.Medium" OnClick="() => CurrentStage = Stage.ISSignIn">Username / Password</CButton>
                </div>
            </div>
            <DialogButtonContainer SpaceEvenly="true">
                <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.Policies">Policies</CButton>
                <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.ISSignGuest">Guest</CButton>
                <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => Dialog.FadeOut()">Viewer</CButton>
            </DialogButtonContainer>
        }
        @if (CurrentStage == Stage.ISSignIn)
        {
            <div class="px-300">
                <div class="input"><CText AutoFocus="true" FocusOnEnter="password" Icon="" Label="User Name" Value="@UserName" ValueChanged="(v) => UserName = v"></CText></div>
                <div class="input"><CText Name="password" ClickOnEnter="signin" Icon="" Type="password" Label="Password" Value="@Password" ValueChanged="(v) => Password = v"></CText></div>
            </div>
            <DialogButtonContainer SpaceEvenly="true">
                <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.SelectAnIDP">Back</CButton>
                <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.ISSignUp">Sign up</CButton>
                <CButton Name="signin" Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="ISSignIn">Sign in</CButton>
            </DialogButtonContainer>
        }
        @if (CurrentStage == Stage.ISSignUp)
        {
            <div class="px-300">
                <div class="input"><CText FocusOnEnter="password" AutoFocus="true" Icon="" Label="User Name" ValueChanged="(v) => UserName = v"></CText></div>
                <div class="input"><CText FocusOnEnter="confirm" Name="password" Icon="" Type="password" Label="Password" ValueChanged="(v) => Password = v"></CText></div>
                <div class="input"><CText FocusOnEnter="email" Name="confirm" Icon="" Type="password" Label="Password (confirm)" ValueChanged="(v) => Password2 = v"></CText></div>
                <div class="input"><CText ClickOnEnter="signup" Name="email" Icon="" Type="email" Label="Recovery Email (optional)" ValueChanged="(v) => Email = v"></CText></div>
            </div>
            <DialogButtonContainer>
                <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.ISSignIn">Back</CButton>
                <CButton Name="signup" Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="ISSignUp">Sign up</CButton>
            </DialogButtonContainer>
        }
        @if (CurrentStage == Stage.ISSignGuest)
        {
            <div class="px-300">
                <div class="input"><CText ClickOnEnter="continue" AutoFocus="true" Icon="" Label="User Name" ValueChanged="(v) => UserName = v"></CText></div>
            </div>
            <DialogButtonContainer>
                <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.SelectAnIDP">Back</CButton>
                <CButton Name="continue" Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="ISSignGuest">Continue</CButton>
            </DialogButtonContainer>
        }
        @if (CurrentStage == Stage.Policies)
        {
            <div class="px-300 policies">
                <CButton OnClick='() => { _ = Dialog.FadeOut(); nm.NavigateTo("/TermsOfService"); }' Emphasis="CButton.EmphasisStyles.Low" Icon="">Terms of Service</CButton>
                <CButton OnClick='() => { _ = Dialog.FadeOut(); nm.NavigateTo("/Privacy"); }' Emphasis="CButton.EmphasisStyles.Low" Icon="">Privacy Policy</CButton>
            </div>
            <DialogButtonContainer>
                <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.SelectAnIDP">Back</CButton>
            </DialogButtonContainer>
        }
    </Dialog>
}

@code {
    override protected void OnInitialized()
    {
        ehs.LoginButtonPressed += LoginButtonPressed;
        base.OnInitialized();
    }
    private Stage rCurrentStage = Stage.SelectAnIDP;
    private Stage CurrentStage
    {
        get
        {
            return rCurrentStage;
        }
        set
        {
            Warning = "";
            rCurrentStage = value;
        }
    }
    private Dialog Dialog;
    private string UserName = "";
    private string Password = "";
    private string Password2 = "";
    private string Email = "";
    private string Warning = "";
    private string[] Headers = new string[]
    {
        "Unknown",
        "",
        "Sign up",
        "Sign in",
        "Choose a user name",
        "Our policies"
    };
    private string[] HeaderIcons = new string[]
    {
        "",
        "",
        "",
        "",
        "",
        ""
    };
    private enum Stage : int
    {
        Unknown = 0,
        SelectAnIDP = 1,
        ISSignUp = 2,
        ISSignIn = 3,
        ISSignGuest = 4,
        Policies = 5
    }
    private async Task ISSignIn()
    {
        Warning = "";
        if (await Task.Run<bool>(() => user.Logon(UserName, Password)))
        {
            await Dialog.FadeOut();
        }
        else
        {
            Warning = "Sign in failed!";
        }
        UserName = Password = null;
    }
    private async Task ISSignUp()
    {
        Warning = "";
        if (Password == "")
        {
            Warning = "Please enter a password.";
            return;
        }
        if (Password != Password2)
        {
            Warning = "Your passwords do not match.";
            return;
        }
        if (!UserTools.IsValidUserIDString(UserName))
        {
            Warning = "The user name entered is invalid.";
            return;
        }
        MailAddress mail = null;
        if (Email != "" && !MailAddress.TryCreate(Email, out mail))
        {
            Warning = "You entered an invalid email address.";
            return;
        }
        Guid uid = UserTools.GetUserID(db, UserName);
        if (uid != Guid.Empty)
        {
            UserAuthMethodsResult methods = UserTools.GetUserAuthenticationMethods(db, uid);
            if (methods.Methods != UserAuthMethods.None)
            {
                Warning = "User Name is already taken.";
                return;
            }
        }
        else
        {
            uid = UserTools.CreateUser(db, UserName);
        }
        if (mail != null)
        {
            UserTools.SetUserProperty(db, uid, UserProperties.Email, mail.Address);
        }
        await Task.Run<bool>(() => UserTools.ChangePassword(db, phq, uid, Password));
        user.Logon(uid);
        await Dialog.FadeOut();
    }
    private async Task ISSignGuest()
    {
        Warning = "";
        if (!UserTools.IsValidUserIDString(UserName))
        {
            Warning = "The user name entered is invalid.";
            return;
        }
        Guid uid = UserTools.GetUserID(db, UserName);
        if (uid != Guid.Empty)
        {
            UserAuthMethodsResult methods = UserTools.GetUserAuthenticationMethods(db, uid);
            if (methods.Methods != UserAuthMethods.None)
            {
                Warning = "User Name is already taken.";
                return;
            }
        }
        else
        {
            uid = UserTools.CreateUser(db, UserName);
        }
        user.Logon(uid);
        await Dialog.FadeOut();
    }
    private void LoginButtonPressed(object o, EventArgs e)
    {
        CurrentStage = Stage.SelectAnIDP;
        if (Dialog != null) _ = Dialog.FadeIn();
        StateHasChanged();
    }
}
@using System.Net.Mail;
@inject Services.User user
@inject Services.Database db

<Dialog Header="@(Headers[(int)CurrentStage])" @ref="Dialog">
    @if (Warning != "")
    {
        <div class="warning">@Warning</div>
    }
    @if (CurrentStage == Stage.UserName)
    {
        <p>This will be your screen-name throughout the game.</p>
        <br />
        <CText Icon="" Label="Username" Value="@UserName" ValueChanged="(v) => UserName = v" />
        <DialogButtonContainer>
            <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.HelpUserName">Help</CButton>
            <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="StageUserName_Next">Next</CButton>
        </DialogButtonContainer>
    }
    @if (CurrentStage == Stage.PasswordExisting)
    {
        <p>The username you selected is locked with a password, please enter it below.</p>
        <br />
        <CText Icon="" Label="Password" Type="password" Value="@Password" ValueChanged="(v) => Password = v" />
        <DialogButtonContainer>
            <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.UserName">Back</CButton>
            <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="StagePasswordExisting_Login">Login</CButton>
        </DialogButtonContainer>
    }
    @if (CurrentStage == Stage.PasswordNew)
    {
        <p>Optionally, lock your username with a password or a third party account.</p>
        <br />
        <CText Icon="" Label="Password (Optional)" Type="password" Value="@Password" ValueChanged="(v) => Password = v" />
        <br />
        <CText Icon="" Label="Password (Confirm)" Type="password" Value="@Password2" ValueChanged="(v) => Password2 = v" />
        <br />
        <CText Icon="" Label="Recovery Email (Optional)" Value="@Email" ValueChanged="(v) => Email = v" />
        <DialogButtonContainer>
            <!--<CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.ThirdParty">Use a third party</CButton>-->
            <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.UserName">Back</CButton>
            <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="StagePasswordNew_Done">Done</CButton>
        </DialogButtonContainer>
    }
    @if (CurrentStage == Stage.ThirdParty)
    {
        <div class="idp-buttons">
            <CButton Emphasis="CButton.EmphasisStyles.Medium">Google</CButton>
            <CButton Emphasis="CButton.EmphasisStyles.Medium">Microsoft</CButton>
        </div>
        <DialogButtonContainer>
            <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.UserName">Back</CButton>
            <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => Dialog.FadeOut()">Cancel</CButton>
        </DialogButtonContainer>
    }
    @if (CurrentStage == Stage.HelpUserName)
    {
        <p>
            iSketch.app usernames must satisfy the following conditions:
        </p>
        <ul>
            <li>Must not contain whitespace.</li>
            <li>Must be less or equal to 25 characters in length.</li>
            <li>Can only contain: a-z, A-Z, 0-9, and any special character on a US keyboard.</li>
        </ul>
        <DialogButtonContainer>
            <CButton Icon="" Emphasis="CButton.EmphasisStyles.Low" OnClick="() => CurrentStage = Stage.UserName">Back</CButton>
        </DialogButtonContainer>
    }
</Dialog>

@code {
    private Stage rCurrentStage = Stage.UserName;
    private Stage CurrentStage
    {
        get
        {
            return rCurrentStage;
        }
        set
        {
            Warning = "";
            rCurrentStage = value;
        }
    }
    private Dialog Dialog;
    private string UserName = "";
    private string Password = "";
    private string Password2 = "";
    private string Email = "";
    private string Warning = "";
    private string[] Headers = new string[]
    {
        "Unknown",
        "Enter a username",
        "Enter your password",
        "Sign up (recommended)",
        "Choose an identity provider",
        "Help with usernames"
    };
    private enum Stage : int
    {
        Unknown = 0,
        UserName = 1,
        PasswordExisting = 2,
        PasswordNew = 3,
        ThirdParty = 4,
        HelpUserName = 5
    }
    private void StageUserName_Next()
    {
        if (UserTools.IsValidUserIDString(UserName))
        {
            Warning = "";
        }
        else
        {
            Warning = "Please enter a valid username.";
            return;
        }
        Guid uid = UserTools.GetUserID(db, UserName);
        if (uid == Guid.Empty)
        {
            CurrentStage = Stage.PasswordNew;
        }
        else
        {
            if (UserTools.UserHasPasswordSet(db, uid))
            {
                CurrentStage = Stage.PasswordExisting;
            }
            else
            {
                CurrentStage = Stage.PasswordNew;
            }
        }
    }
    private void StagePasswordExisting_Login()
    {
        if (user.Logon(UserName, Password))
        {
            _ = Dialog.FadeOut();
        }
        else
        {
            Warning = "Password is incorrect!";
        }
    }
    private void StagePasswordNew_Done()
    {
        MailAddress mail = null;
        if (Password != "" && Password != Password2)
        {
            Warning = "Your passwords do not match.";
            return;
        }
        if (Email != "" && !MailAddress.TryCreate(Email, out mail))
        {
            Warning = "You entered an invalid email address.";
            return;
        }
        Guid uid = UserTools.GetUserID(db, UserName);
        if (uid == Guid.Empty)
        {
            uid = UserTools.CreateUser(db, UserName);
        }
        user.Logon(uid);
        if (Password != "")
        {
            user.ChangePassword(Password);
        }
        if (mail != null)
        {
            UserTools.SetUserSetting(db, uid, UserSettings.Email, mail.Address);
        }
        _ = Dialog.FadeOut();
    }
}
@inject IJSRuntime js;

<div @onclick="BreakOutFadeOut" id="@ID" style="z-index:@ZIndex;" class="popup">
    <div></div>
    <div @onclick:stopPropagation="true" class="form">
        @ChildContent
    </div>
    <div></div>
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public int ZIndex { get; set; } = 100;
    [Parameter]
    public EventCallback OnFadeOut { get; set; }
    [Parameter]
    public bool AllowBreakOut { get; set; } = true;
    private string ID = "x" + Guid.NewGuid().ToString();
    public async Task FadeOut()
    {
        _ = js.InvokeVoidAsync("eval",
            "var elm = document.getElementById('" + ID + "');" +
            "if (elm != null) elm.classList.add('closing');" +
            "document.querySelector('[name=theme-color]').content = '#ffffff';"
        );
        await Task.Delay(75);
        await OnFadeOut.InvokeAsync();
    }
    public async Task FadeIn()
    {
        await js.InvokeVoidAsync("eval",
            "var elm = document.getElementById('" + ID + "');" +
            "if (elm != null) elm.classList.remove('closing');" +
            "document.querySelector('[name=theme-color]').content = '#adadad';"
        );
    }
    private async Task BreakOutFadeOut()
    {
        if (AllowBreakOut) await FadeOut();
    }
    protected override Task OnInitializedAsync()
    {
        _ = js.InvokeVoidAsync("eval", "document.querySelector('[name=theme-color]').content = '#adadad';");
        return base.OnInitializedAsync();
    }
}